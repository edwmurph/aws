Transform: AWS::Serverless-2016-10-31

Description: 'Deploys an EKS cluster'

Parameters:
  ClusterName:
    Type: String
    Description: Name of the EKS cluster
    Default: test

Resources:
  EKSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy

  NodeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy

  RuntimePodRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${EKSCluster}-pod-role'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
      AssumeRolePolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Federated": "arn:aws:iam::${AWS::AccountId}:oidc-provider/${ClusterOIDCURL}"
              },
              "Action": "sts:AssumeRoleWithWebIdentity"
            }
          ]
        }

  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !ImportValue vpc-VPC

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: 1.27
      RoleArn: !GetAtt EKSRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup
        SubnetIds:
          - !ImportValue vpc-PublicSubnet1
          - !ImportValue vpc-PublicSubnet2
        EndpointPublicAccess: true
        PublicAccessCidrs:
          - 0.0.0.0/0
      KubernetesNetworkConfig:
        IpFamily: ipv4
        ServiceIpv4Cidr: 10.100.0.0/16

  NodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodeRole: !GetAtt NodeRole.Arn
      CapacityType: SPOT
      ScalingConfig:
        DesiredSize: 2
        MaxSize: 4
        MinSize: 1
      Subnets:
        - !ImportValue vpc-PublicSubnet1
        - !ImportValue vpc-PublicSubnet2
      InstanceTypes:
        - t3.small
      RemoteAccess:
        Ec2SshKey: !ImportValue vpc-MyKeyPair

  ClusterOIDCURL:
    Type: Custom::ClusterOIDCURL
    Properties:
      ServiceToken: !ImportValue oidc-ClusterOIDCURLFunction
      ClusterName: !Ref EKSCluster

  ClusterOIDCProvider:
    Type: Custom::ClusterOIDCProvider
    Properties:
      ServiceToken: !ImportValue oidc-ClusterOIDCProviderFunction
      ClusterOIDCURL: !Ref ClusterOIDCURL
