Transform: AWS::Serverless-2016-10-31

Description:  This template deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets.

Parameters:
  VPCCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.1.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.1.10.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.1.11.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.1.20.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.1.21.0/24

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: VPC

  # INTERNET GATEWAYS

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # NAT GATEWAY

  NATGatewayEIP:
     Type: AWS::EC2::EIP
     Properties:
        Domain: vpc

  # NATGateway:
  #  Type: AWS::EC2::NatGateway
  #  Properties:
  #     AllocationId: !GetAtt NATGatewayEIP.AllocationId
  #     SubnetId: !Ref PublicSubnet1
  #     Tags:
  #     - Key: stack
  #       Value: production

  # RouteNATGateway:
  #    Type: AWS::EC2::Route
  #    Properties:
  #       RouteTableId: !Ref PrivateRouteTable
  #       DestinationCidrBlock: '0.0.0.0/0'
  #       NatGatewayId: !Ref NATGateway

  # SUBNETS

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet2

  PublicSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: PublicSubnetGroup
      DBSubnetGroupDescription: PublicSubnetGroup
      SubnetIds:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2

  PrivateSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: PrivateSubnetGroup
      DBSubnetGroupDescription: PrivateSubnetGroup
      SubnetIds:
      - !Ref PrivateSubnet1
      - !Ref PrivateSubnet2

  # ROUTE TABLES

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  # SECURITY GROUPS

  NoIngress:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: NoIngress
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC

  AllIngress:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow all ingress traffic
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1

  WebIngress:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: WebIngress
      GroupDescription: "Allows Web Ingress"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - FromPort: 80
          ToPort: 80
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
        - FromPort: 443
          ToPort: 443
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0

  SSHAccess:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: SSHAccess
      GroupDescription: "Allows SSH Access"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0

  MyKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: my-key-pair
      KeyType: rsa
      PublicKeyMaterial: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCds2ju6dGiH7JZkP0pxfdvFKIczlILhyw8gRa7S/g8H+USviGAoShoAzly6v3I9ngNAiakHaKd3Y2WKCD/3ZuBFfBRN7OCDgjmz+AyWp1TyXXAKKG7IOY4m1TXXCpI1vFJac8idNLdrufe2hNah1aVj5YYyYOH1rX5nnzR6TyICCatPFZCn1TmT5E6myaItkgvAm/A7bmE4OX+KcFV/G2wmFRATMOdADXmgu4I2bAH1yKi5DZ0icOQWocMRLiZDarn3Pnenldf2akUCg6uxkgBipp1T+/iXG9aMYn82vIJQKncsXFBSzmxCvD667a7dueDGo4CV9vGhMXVN4spfO8x my-key-pair'

  AdminRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AdminRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Ref AWS::AccountId
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPC"
  VPCCIDR:
    Description: VPC CIDR
    Value: !Ref VPCCIDR
    Export:
      Name: !Sub "${AWS::StackName}-VPCCIDR"
  MyKeyPair:
    Description: My key pair
    Value: !Ref MyKeyPair
    Export:
      Name: !Sub "${AWS::StackName}-MyKeyPair"
  PublicSubnet1:
    Description: The public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet1"
  PublicSubnet2:
    Description: The public subnet in the 2st Availability Zone
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet2"
  PrivateSubnet1:
    Description: The private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet1"
  PublicSubnetGroup:
    Description: A reference to the public subnets
    Value: !Ref PublicSubnetGroup
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetGroup"
  PrivateSubnetGroup:
    Description: A reference to the private subnets
    Value: !Ref PrivateSubnetGroup
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetGroup"
  SSHAccess:
    Description: SSH Access Security Group
    Value: !Ref SSHAccess
    Export:
      Name: !Sub "${AWS::StackName}-SSHAccess"
  WebIngress:
    Description: The id of the web ingress security group
    Value: !Ref WebIngress
    Export:
      Name: !Sub "${AWS::StackName}-WebIngress"
  AllIngress:
    Description: The id of the all ingress security group
    Value: !Ref AllIngress
    Export:
      Name: !Sub "${AWS::StackName}-AllIngress"
